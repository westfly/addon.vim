snippet cls
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	private:
		${3:/* data */}
	private:
		DISALLOW_COPY_AND_ASSIGN($1);
	};
snippet cpy
	// Copyright (c) `strftime("%Y")` ${1:`g:snips_company`}. ALL RIGHTS RESERVED.
	// Author: ${2:`g:snips_author`}.
	// Create `system("date +%Y-%m-%d")`
snippet stclude
	#include <vector>
	#include <string>
	#include <map>
	using namespace std;
snippet forv
	for (vector<${1:string}>::${3:const_}iterator it = ${2:vtor}.begin();
			it != $2.end(); ++it) {
	}
snippet mapfor
	for (map<${1:string}, string>::${3:const_}iterator iter = ${2:mapper}.begin();
			iter !=$2.end(); ++iter) {
	}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> ${3}map;
# std::vector
snippet vt
	std::vector<${1:char}> v${2};
# snippet for gtest
snippet testsuit
	class ${1:Class}Test :public testing::Test {
	 protected:
		static void SetUpTestCase() {
		}
		static void TearDownTestCase() {
		}
		static ${1} m_gloable_;
	};
	TEST_F($1, ${2:Function})
snippet testcase
	class ${1:Class}Test :public testing::Test {
	 protected:
		virtual void SetUp() {
		}
		virtual void TearDown() {
		}
	};
	TEST_F($1Test, ${2:Function})
# gflag snippets
snippet sflag
	/*FLAGS_${1:flag}*/
	DEFINE_${2:string}($1, ${3:""}, "$4");
snippet bflag
	/*FLAGS_${1:flag}*/
	DEFINE_${2:bool}($1, ${3:false}, "$4");
snippet iflag
	/*FLAGS_${1:flag}*/
	DEFINE_${2:int32}($1, ${3:}, "$4");
